// <auto-generated />
using EatListDataService.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EatListDataService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180319221938_gender")]
    partial class gender
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EatListDataService.DataBase.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("Bio");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Dob");

                    b.Property<DateTime>("Doi");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsRestaurant");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RestaurantName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("profilepic");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EatListDataService.DataTables.BookingDishes", b =>
                {
                    b.Property<int>("BookingDishID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookingID");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<int>("DishID");

                    b.HasKey("BookingDishID");

                    b.HasIndex("BookingID");

                    b.HasIndex("DishID");

                    b.ToTable("TblBookingDishes");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Bookings", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookingStatusID");

                    b.Property<DateTime>("BookingTime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("RestaurantID");

                    b.Property<int?>("TableSize");

                    b.HasKey("BookingID");

                    b.HasIndex("BookingStatusID");

                    b.ToTable("TblBookings");
                });

            modelBuilder.Entity("EatListDataService.DataTables.BookingStatus", b =>
                {
                    b.Property<int>("BookingStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("StatusName");

                    b.HasKey("BookingStatusID");

                    b.ToTable("TblBookingStatus");
                });

            modelBuilder.Entity("EatListDataService.DataTables.ChatMessages", b =>
                {
                    b.Property<int>("ChatMessageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message");

                    b.HasKey("ChatMessageID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Comments", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DatePosted");

                    b.Property<string>("Image");

                    b.Property<int>("PostID");

                    b.HasKey("CommentID");

                    b.ToTable("TblCommennts");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Dishes", b =>
                {
                    b.Property<int>("DishesID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("RestaurantID");

                    b.HasKey("DishesID");

                    b.HasIndex("RestaurantID");

                    b.ToTable("TblDishes");
                });

            modelBuilder.Entity("EatListDataService.DataTables.DishMedia", b =>
                {
                    b.Property<int>("DishMediaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DishID");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.HasKey("DishMediaID");

                    b.HasIndex("DishID");

                    b.ToTable("TblDishMedia");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Friendship", b =>
                {
                    b.Property<int>("FriendshipID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("FollowerID");

                    b.HasKey("FriendshipID");

                    b.ToTable("TblFriendship");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Likes", b =>
                {
                    b.Property<int>("LikeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("PostID");

                    b.HasKey("LikeID");

                    b.ToTable("TblLikes");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Notifications", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Message");

                    b.Property<string>("Recipient");

                    b.Property<string>("Source");

                    b.HasKey("NotificationID");

                    b.ToTable("tblNotification");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Posts", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("DishID");

                    b.Property<string>("RestaurantID");

                    b.HasKey("PostID");

                    b.ToTable("TblPosts");
                });

            modelBuilder.Entity("EatListDataService.DataTables.PostsMedia", b =>
                {
                    b.Property<int>("PostMediaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileType");

                    b.Property<string>("FileURL");

                    b.Property<int>("PostID");

                    b.HasKey("PostMediaID");

                    b.ToTable("TblPostsMedia");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Tags", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("DishID");

                    b.HasKey("TagID");

                    b.ToTable("TblTags");
                });

            modelBuilder.Entity("EatListDataService.DataTables.ToDoMeals", b =>
                {
                    b.Property<int>("ToDoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("DishID");

                    b.HasKey("ToDoID");

                    b.ToTable("TblToDoMeals");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Upload", b =>
                {
                    b.Property<int>("UploadID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsProfile");

                    b.Property<string>("UserID");

                    b.HasKey("UploadID");

                    b.ToTable("tblUploads");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EatListDataService.DataTables.BookingDishes", b =>
                {
                    b.HasOne("EatListDataService.DataTables.Bookings", "Bookings")
                        .WithMany("BookingDish")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EatListDataService.DataTables.Dishes", "Dishes")
                        .WithMany()
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EatListDataService.DataTables.Bookings", b =>
                {
                    b.HasOne("EatListDataService.DataTables.BookingStatus", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusID");
                });

            modelBuilder.Entity("EatListDataService.DataTables.Dishes", b =>
                {
                    b.HasOne("EatListDataService.DataBase.ApplicationUser", "ApplicationUser")
                        .WithMany("Dishes")
                        .HasForeignKey("RestaurantID");
                });

            modelBuilder.Entity("EatListDataService.DataTables.DishMedia", b =>
                {
                    b.HasOne("EatListDataService.DataTables.Dishes", "Dishes")
                        .WithMany()
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EatListDataService.DataBase.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EatListDataService.DataBase.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EatListDataService.DataBase.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EatListDataService.DataBase.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
